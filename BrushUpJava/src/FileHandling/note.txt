Introduction:
Data stored in variables and arrays is temporary. it is lost when a local variable goes out of scope or when the program terminates. For long term retention of date, even after the programs that create the data terminate, computer uses files. You use files every day for tasks such as writing a document or creating a spreadsheet. Computer store files on secondary storage. Data maintained in files is persistent data it exists beyond the duration of program execution. in this chapter we explain how java programs create, update and process files. we begin with the discussion of java's architectures for handling file programmatically. Next we explain that data can be stored in text files or binary files, and we cover the differences between them. We demonstrate retrieving information about files and directories using class File. We show how to create and manipulate sequential-access text files. Working with text files allows you to quickly and easily start manipulating files. As you will learn however, it is difficult to read data from the text files back into the objet form. Fortunately, many object-oriented languages including java provides a way to write objects to and read objects from files. known as object serialization and deserialization. To demonstrate this, we recreate some of our sequential access programs that used text files. this time by storing objects in binary files.


Files & Streams:
java views each file as a sequential stream of bytes. every operating system provides a mechanism to determine the end of a file such as an end of file marker of a count of total bytes in the file that is recorded in a system maintained administrative data structure. a java program processing a stream of bytes simply receives an indication from the os when it reaches the end of the stream. The program does not need to know how the underlying platform represents files of streams. in some cases the end of file indication occurs as an exception. in other cases indication is a return value form a method invoked on a stream process object.

Byte based vs character base stream:
File streams can be used to input and output data as bytes or characters. Byte based streams input and output cdata in its binary format. character based streams input and output data as a sequence of characters. if the value 5 were being bytes based stream, it would be stored in the binary format of the numeric value 5 or 101. if the value 5 were being stored in a character based stream, it would be stored in the binary format of character '5' 0000000 00110101 this is the binary representation for the numerice